const a = 87;
const b = 70;
const c = 100;

// 변수를 활용하여 점수를 합산한 자료구조
const average = (a + b + c) / 3;
console.log(average);

// 아래 배열에서 숫자 5를 찾으세요! 그리고 시간 복잡도를 계산하세요!
const arr = [1, 3, 5, 7];
const arr1 = [5, 1, 3, 7];
const arr2 = [1, 3, 7, 5];

// 빅 오메가 = 가장 빠른 경우 : 한 번에 값을 찾는 경우
// 빅 오 = 가장 늦은 경우 : 배열의 모든 아이템을 검수 => 배열의 길이만큼 시간
// 빅 세타 = 보통 경우 : 배열의 중간도 만큼 아이템을 검수

// 일반적으로 시간 복잡도를 계산할 때 어떤 경우를 전제로 삼을까??
// => 빅 오를 일반적으로 삼는다.

// 일반적으로 시간 복잡도를 계산할 때 어떤 경우를 전제로 삼을까??   => 빅 오를 일반적으로 삼는다.

// O(n)알고리즘을 활용해서 시간 복잡도를 계산한다!

// O(2n) = 가장 느림
// O(n2) = 더 느림
// O(10) = 느림
// O(1) = 가장 빠름
